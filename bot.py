import os
import json
import logging
from telethon import TelegramClient, events
from openai import AsyncOpenAI
from dotenv import load_dotenv
from config import (
    FINAL_SYSTEM_PROMPT, 
    MESSAGES,
    TELEGRAM_CONFIG,
    OPENAI_CONFIG,
    FUNCTIONS
)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot.log'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
client = TelegramClient(
    TELEGRAM_CONFIG.session_name,
    TELEGRAM_CONFIG.api_id,
    TELEGRAM_CONFIG.api_hash
)



openai_client = AsyncOpenAI(
    api_key=OPENAI_CONFIG.api_key,
    base_url=OPENAI_CONFIG.base_url
)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–æ–≤
dialogue_contexts = {}

async def get_ai_response(message: str, context: list = None) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç GPT –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É—è Function Calling.

    Args:
        message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context (list, optional): –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

    Returns:
        dict: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–æ–ª—è–º–∏:
            - response (str): –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            - requires_manager (bool): –ù—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥ –º–µ–Ω–µ–¥–∂–µ—Ä—É
            - reason (str): –ü—Ä–∏—á–∏–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    """
    try:
        print('–æ–±—Ä–∞–±–æ—Ç–∫–∞ ai response')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API
        messages = [
            {"role": "system", "content": FINAL_SYSTEM_PROMPT}
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if context:
            for msg in context[-5:]:
                messages.append({
                    "role": "user" if msg["is_user"] else "assistant",
                    "content": msg["text"]
                })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({"role": "user", "content": message})

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        response = await openai_client.chat.completions.create(
            model=OPENAI_CONFIG.model_name,
            messages=messages,
            functions=FUNCTIONS,
            function_call={"name": "handle_user_request"},  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            **OPENAI_CONFIG.model_settings
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
        function_call = response.choices[0].message.function_call
        
        if function_call and function_call.name == "handle_user_request":
            # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
            try:
                args = json.loads(function_call.arguments)
                return {
                    "response": args.get("response", ""),
                    "requires_manager": args.get("requires_manager", True),
                    "reason": args.get("reason", "")
                }
            except json.JSONDecodeError:
                logger.error(f"Failed to parse function arguments: {function_call.arguments}")
                return {
                    "response": MESSAGES["error_message"],
                    "requires_manager": True,
                    "reason": "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏"
                }
        else:
            logger.error("No function call in response")
            return {
                "response": MESSAGES["error_message"],
                "requires_manager": True,
                "reason": "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞"
            }

    except Exception as e:
        logger.error(f"Error in get_ai_response: {str(e)}")
        return {
            "response": MESSAGES["error_message"],
            "requires_manager": True,
            "reason": f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        }

async def notify_manager(user_id: int, message: str, reason: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await client.get_entity(user_id)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç
        if user.username:
            chat_link = f"https://t.me/{user.username}"
        else:
            chat_link = f"tg://user?id={user_id}"
            
        manager_message = (
            f"‚ùóÔ∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n"
            f"üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
            f"üë§ –ò–º—è: {user.first_name} {user.last_name if user.last_name else ''}\n"
            f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º]({chat_link})\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        await client.send_message(
            TELEGRAM_CONFIG.manager_channel_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            manager_message,
            parse_mode='md',
            link_preview=False
        )
    except Exception as e:
        logger.error(f"Failed to notify manager: {str(e)}")
        # –î–æ–±–∞–≤–∏–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.error(f"Channel ID: {TELEGRAM_CONFIG.manager_channel_id}")
        logger.error(f"Message: {manager_message}")

@client.on(events.NewMessage(incoming=True))
async def handle_message(event):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if event.is_private:  # –¢–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_id = event.sender_id
        message = event.message.text

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        if user_id not in dialogue_contexts:
            dialogue_contexts[user_id] = []

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        dialogue_contexts[user_id].append({
            "is_user": True,
            "text": message
        })

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        response_data = await get_ai_response(
            message, 
            dialogue_contexts[user_id]
        )
        print('requires_manager', response_data["requires_manager"])
        print('response', response_data["response"])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        if response_data["requires_manager"]:
            await event.respond(MESSAGES["transfer_to_manager"])
            await notify_manager(
                user_id,
                message,
                response_data["reason"]
            )
        else:
            await event.respond(response_data["response"])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            dialogue_contexts[user_id].append({
                "is_user": False,
                "text": response_data["response"]
            })

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if len(dialogue_contexts[user_id]) > 6:
            dialogue_contexts[user_id] = dialogue_contexts[user_id][-6:]

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        await client.start(phone=TELEGRAM_CONFIG.phone_number)
        await client.run_until_disconnected()
    except Exception as e:
        logger.error(f"Bot crashed: {str(e)}")

if __name__ == '__main__':
    import asyncio
    asyncio.run(main()) 