import os
import json
import logging
from telethon import TelegramClient, events
from dotenv import load_dotenv
from gpt_client import GPTClient
from config import (
    FINAL_SYSTEM_PROMPT, 
    MESSAGES,
    TELEGRAM_CONFIG,
    OPENAI_CONFIG,
    FUNCTIONS
)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
print("Starting bot initialization...")
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot.log'
)
logger = logging.getLogger(__name__)
print("Logging configured")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
print("Loading environment variables...")
load_dotenv()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
print("Initializing Telegram client...")
client = TelegramClient(
    TELEGRAM_CONFIG.session_name,
    TELEGRAM_CONFIG.api_id,
    TELEGRAM_CONFIG.api_hash
)
print("Telegram client initialized")


gpt_client = GPTClient()
print("Initializing GPT client...")

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–æ–≤
dialogue_contexts = {}

async def notify_manager(user_id: int, message: str, reason: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await client.get_entity(user_id)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç
        if user.username:
            chat_link = f"https://t.me/{user.username}"
        else:
            chat_link = f"tg://user?id={user_id}"
            
        manager_message = (
            f"‚ùóÔ∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n"
            f"üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
            f"üë§ –ò–º—è: {user.first_name} {user.last_name if user.last_name else ''}\n"
            f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º]({chat_link})\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        await client.send_message(
            TELEGRAM_CONFIG.manager_channel_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            manager_message,
            parse_mode='md',
            link_preview=False
        )
    except Exception as e:
        logger.error(f"Failed to notify manager: {str(e)}")
        # –î–æ–±–∞–≤–∏–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.error(f"Channel ID: {TELEGRAM_CONFIG.manager_channel_id}")
        logger.error(f"Message: {manager_message}")

@client.on(events.NewMessage(incoming=True))
async def handle_message(event):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if event.is_private:  # –¢–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_id = event.sender_id
        message = event.message.text

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        if user_id not in dialogue_contexts:
            dialogue_contexts[user_id] = []

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        dialogue_contexts[user_id].append({
            "is_user": True,
            "text": message
        })

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        response_data = await gpt_client.get_response(
            message, 
            dialogue_contexts[user_id]
        )
        print('requires_manager', response_data["requires_manager"])
        print('response', response_data["response"])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        if response_data["requires_manager"]:
            await event.respond(MESSAGES["transfer_to_manager"])
            await notify_manager(
                user_id,
                message,
                response_data["reason"]
            )
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
            formatted_response = response_data["response"].replace('\\n', '<br>')
            await event.respond(
                formatted_response,
                parse_mode='html'
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            dialogue_contexts[user_id].append({
                "is_user": False,
                "text": response_data["response"]
            })

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if len(dialogue_contexts[user_id]) > 6:
            dialogue_contexts[user_id] = dialogue_contexts[user_id][-6:]

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        print("Starting main execution...")
        print("Starting Telegram client...")
        await client.start(phone=TELEGRAM_CONFIG.phone_number)
        print("Telegram client started successfully")
        await client.run_until_disconnected()
    except Exception as e:
        print(f"Error in main execution: {str(e)}")
        logger.error(f"Main execution error: {str(e)}")

if __name__ == '__main__':
    import asyncio
    asyncio.run(main()) 